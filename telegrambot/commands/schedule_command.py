from datetime import timedelta

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, CommandHandler, MessageHandler, filters

import asu
from database.models import Group, SearchType
from telegrambot.context import ApplicationContext

from .common import *

async def schedule_callback(update: Update, context: ApplicationContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule"""
    
    # If user enters group name after the command, then search for it
    # If no input, then use saved, otherwise ask user to enter group
    
    group_name = ''.join(context.args) if context.args else ""
    if group_name:
        
        return await handle_schedule_by_name(update, context, group_name)
    
    group = await get_saved_group(update.effective_user)
    if group:
        await add_statistics(update.effective_user, SearchType.group, group.name)
        
        context.user_data.selected_schedule = group
        return await show_schedule_options(update, context)
    
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
    return GET_GROUP_NAME

async def get_group_name(update: Update, context: ApplicationContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    
    if not (group_name := update.message.text):
        return END
    
    if not group_name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
        return GET_GROUP_NAME
    
    return await handle_schedule_by_name(update, context, group_name)

async def handle_schedule_by_name(update: Update, context: ApplicationContext, group_name: str) -> int:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    
    # Limit group name to 50 symbols
    group_name = group_name.strip()[:50]
    
    # Stats
    await add_statistics(update.effective_user, SearchType.group, group_name)
    
    schedule = await asu.client.search_group(group_name)
    if not schedule:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return END
    
    context.user_data.selected_schedule = schedule
    
    if not (saved_group := await get_saved_group(update.effective_user)) \
        or saved_group.group_id != schedule.group_id:
            # Checking by group id might be bad idea?
            return await _ask_to_save_group(update, context, schedule.name)
    
    return await show_schedule_options(update, context)

async def _ask_to_save_group(update: Update, _context: ApplicationContext, group_name: str) -> int:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="save_yes"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="save_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É {group_name} –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –±—É–¥—É—â–µ–º?",
        reply_markup=reply_markup)
    return SAVE_GROUP

async def save_group_callback(update: Update, context: ApplicationContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    if not (query := update.callback_query):
        return END
    
    await query.answer()

    if query.data == "save_yes":
        schedule = context.user_data.selected_schedule
        if isinstance(schedule, Group):
            await set_saved_group(update.effective_user, schedule)
            await query.edit_message_text(f"–ì—Ä—É–ø–ø–∞ {schedule.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        else:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")

    return await show_schedule_options(update, context)

async def show_schedule_options(update: Update, context: ApplicationContext) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""

    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="T")],
        [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="M")],
        [InlineKeyboardButton("–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é", callback_data="W")],
        [InlineKeyboardButton("–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", callback_data="NW")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    schedule = context.user_data.selected_schedule
    await update.effective_message.reply_text(
            f"üìö –ì—Ä—É–ø–ø–∞ {schedule.name}\n–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
            reply_markup=reply_markup)
    
    return SHOW_SCHEDULE
        
schedule_handler = ConversationHandler(
    entry_points=[
        CommandHandler("schedule", schedule_callback),
    ],
    states={
        GET_GROUP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_group_name)],
        SAVE_GROUP: [CallbackQueryHandler(save_group_callback, pattern='^save_yes|save_no$')],
        SHOW_SCHEDULE: [
            CallbackQueryHandler(handle_show_schedule, pattern='^T|M|W|NW$')
        ]
    },
    fallbacks=[MessageHandler(filters.COMMAND, exit_conversation)],
    allow_reentry=True,
    # https://github.com/python-telegram-bot/python-telegram-bot/wiki/Frequently-Asked-Questions#what-do-the-per_-settings-in-conversationhandler-do
    per_message=False,
    per_user=False,
    conversation_timeout=timedelta(seconds=30),
    name="schedule_conversation"
)