from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CommandHandler, 
    ConversationHandler, 
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from telegram.constants import ParseMode
from telegram.error import TelegramError
import logging

from .common import DATABASE, END
from .admin_command import ADMIN_IDS

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CATEGORY_SELECTION = 1
GROUP_INPUT = 2
LECTURER_INPUT = 3
TECHCARD_GROUP = 4
TECHCARD_LINK = 5
MESSAGE_INPUT = 6
CONFIRM_SEND = 7

# Callback data
CATEGORIES = {
    'group_schedule': '–ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã',
    'lecturer_schedule': '–ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è',
    'techcard': '–ü–æ–∏—Å–∫ —Ç–µ—Ö.–∫–∞—Ä—Ç—ã',
    'other': '–î—Ä—É–≥–∞—è',
    'start': '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç'
}

async def report_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report"""
    if not ((message := update.message) and (user := message.from_user)):
        return END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if DATABASE.is_report_denied(user.id):
        await message.reply_text("–í–∞–º –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö.")
        return END

    keyboard = [
        [InlineKeyboardButton(text, callback_data=data)]
        for data, text in CATEGORIES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_text(
        "–ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:",
        reply_markup=reply_markup
    )
    return CATEGORY_SELECTION

async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    category = query.data
    context.user_data['report_category'] = category
    
    if category == 'start':
        await query.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        return END
        
    if category == 'group_schedule':
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:")
        return GROUP_INPUT
        
    if category == 'lecturer_schedule':
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
        return LECTURER_INPUT
        
    if category == 'techcard':
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:")
        return TECHCARD_GROUP
        
    if category == 'other':
        await query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É:"
        )
        return MESSAGE_INPUT

async def group_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['group'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É:"
    )
    return MESSAGE_INPUT

async def lecturer_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['lecturer'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É:"
    )
    return MESSAGE_INPUT

async def techcard_group_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['group'] = update.message.text
    keyboard = [[InlineKeyboardButton("–û—à–∏–±–∫–∞ –Ω–µ –≤ —ç—Ç–æ–º", callback_data="not_link")]]
    await update.message.reply_text(
        "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ —Ç–æ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–µ –≤–µ—Ä–Ω–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return TECHCARD_LINK

async def techcard_link_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query:
        await update.callback_query.answer()
        context.user_data['techcard_link'] = None
        await update.callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É:"
        )
    else:
        context.user_data['techcard_link'] = update.message.text
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É:"
        )
    return MESSAGE_INPUT

async def message_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['message'] = update.message.text
    keyboard = [[InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send")]]
    await update.message.reply_text(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRM_SEND

async def send_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    category = context.user_data.get('report_category')
    message = context.user_data.get('message')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    report_text = (
        f"üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ\n"
        f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id} ({user.username or '–±–µ–∑ username'})\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORIES[category]}\n"
    )
    
    if category == 'group_schedule':
        report_text += f"–ì—Ä—É–ø–ø–∞: {context.user_data.get('group')}\n"
    elif category == 'lecturer_schedule':
        report_text += f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {context.user_data.get('lecturer')}\n"
    elif category == 'techcard':
        report_text += (
            f"–ì—Ä—É–ø–ø–∞: {context.user_data.get('group')}\n"
            f"–°—Å—ã–ª–∫–∞: {context.user_data.get('techcard_link') or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        )
    
    report_text += f"\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message}"
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", callback_data=f"report_accept_{user.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"report_reject_{user.id}")
        ],
        [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"report_block_{user.id}")]
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    await context.bot.send_message(
        chat_id=context.application.bot_data['DEVELOPER_CHAT_ID'],
        text=report_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    await query.message.edit_text(
        "–í–∞—à –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç."
    )
    return END

async def admin_report_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –æ—Ç—á–µ—Ç—É"""
    query = update.callback_query
    if not query:
        return
        
    await query.answer()
    
    action, user_id = query.data.rsplit('_', 1)
    user_id = int(user_id)
    
    try:
        if action == 'report_block':
            DATABASE.set_report_denied(user_id, True)
            await query.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –í–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–æÔøΩÔøΩ –æ–± –æ—à–∏–±–∫–∞—Ö."
            )
        
        elif action == 'report_accept':
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ—Ç—á–µ—Ç–∞
            await context.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í–∞—à –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏–Ω—è—Ç –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω."
            )
            
        elif action == 'report_reject':
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –í–∞—à –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω."
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", callback_data=f"report_accepted_{user_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"report_rejected_{user_id}")
            ]
        ]
        await query.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
        
    except TelegramError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await query.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

report_handler = ConversationHandler(
    entry_points=[CommandHandler('report', report_callback)],
    states={
        CATEGORY_SELECTION: [
            CallbackQueryHandler(category_handler)
        ],
        GROUP_INPUT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, group_input_handler)
        ],
        LECTURER_INPUT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, lecturer_input_handler)
        ],
        TECHCARD_GROUP: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, techcard_group_handler)
        ],
        TECHCARD_LINK: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, techcard_link_handler),
            CallbackQueryHandler(techcard_link_handler, pattern="^not_link$")
        ],
        MESSAGE_INPUT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, message_input_handler)
        ],
        CONFIRM_SEND: [
            CallbackQueryHandler(send_report, pattern="^send$")
        ]
    },
    fallbacks=[],
    name="report_conversation"
)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_report_callback = CallbackQueryHandler(
    admin_report_handler,
    pattern="^report_(accept|reject|block)_[0-9]+$"
)

async def unblock_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unblock"""
    if not ((message := update.message) and (user := update.effective_user)):
        return
        
    if user.id not in ADMIN_IDS:
        await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n–ü—Ä–∏–º–µ—Ä: /unblock 123456789")
        return
        
    try:
        user_id = int(context.args[0])
        DATABASE.set_report_denied(user_id, False)
        await message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤.")
    except ValueError:
        await message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

unblock_handler = CommandHandler("unblock", unblock_callback) 