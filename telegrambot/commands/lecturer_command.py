from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, CommandHandler, MessageHandler, filters

from database.models import Lecturer, SearchType
from .common import *

async def lecturer_callback(update: Update, context: ApplicationContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lecturer"""
    
    lecturer_name = ''.join(context.args) if context.args else ""
    if lecturer_name:
        return await handle_lecturer_by_name(update, context, lecturer_name)
    
    lecturer = await get_saved_lecturer(update.effective_user)
    if lecturer:
        await add_statistics(update.effective_user, SearchType.lecturer, lecturer.name)
        
        context.user_data.selected_schedule = lecturer
        return await show_lecturer_options(update, context)
    
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
    return GET_LECTURER_NAME

async def get_lecturer_name(update: Update, context: ApplicationContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    
    if not (lecturer_name := update.message.text):
        return END
    
    if not lecturer_name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        return GET_GROUP_NAME
    
    return await handle_lecturer_by_name(update, context, lecturer_name)

async def handle_lecturer_by_name(update: Update, context: ApplicationContext, lecturer_name: str) -> int:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    
    # Limit to 50 symbols
    lecturer_name = lecturer_name.strip()[:50]
    
    await add_statistics(update.effective_user, SearchType.lecturer, lecturer_name)
    
    lecturer = await asu.client.search_lecturer(lecturer_name)
    if not lecturer:
        await update.message.reply_text(
            "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return END
    
    context.user_data.selected_schedule = lecturer
    
    if not (saved_lecturer := await get_saved_lecturer(update.effective_user)) \
        or saved_lecturer.lecturer_id != lecturer.lecturer_id:
            # Checking by lecturer id might be bad idea?
            return await ask_to_save_lecturer(update, context, lecturer.name)
    
    return await show_lecturer_options(update, context)

async def ask_to_save_lecturer(update: Update, _context: ApplicationContext, lecturer_name: str) -> int:
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="save_lecturer_yes"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="save_lecturer_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {lecturer_name} –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –±—É–¥—É—â–µ–º?",
        reply_markup=reply_markup
    )
    return SAVE_LECTURER

async def save_lecturer_callback(update: Update, context: ApplicationContext) -> int:
    if not (query := update.callback_query):
        return END
    
    query = update.callback_query
    await query.answer()

    if query.data == "save_lecturer_yes":
        lecturer = context.user_data.selected_schedule
        if isinstance(lecturer, Lecturer):
            await set_saved_lecturer(update.effective_user, lecturer)
            await query.edit_message_text(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {lecturer.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
        else:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–∫–∞–∑–∞
    return await show_lecturer_options(update, context)

async def show_lecturer_options(update: Update, context: ApplicationContext) -> int:
    """–ü–æ–∫–∞–∑ –æ–ø—Ü–∏–π –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="T")],
        [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="M")],
        [InlineKeyboardButton("–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é", callback_data="W")],
        [InlineKeyboardButton("–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", callback_data="NW")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    lecturer = context.user_data.selected_schedule
    await update.effective_message.reply_text(
            f"üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lecturer.name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=reply_markup)
    
    return SHOW_LECTURER_SCHEDULE

lecturer_handler = ConversationHandler(
    entry_points=[CommandHandler("lecturer", lecturer_callback)],
    states={
        GET_LECTURER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_lecturer_name)],
        SHOW_LECTURER_SCHEDULE: [
            CallbackQueryHandler(handle_show_schedule, pattern='^T|M|W|NW$')
        ],
        SAVE_LECTURER: [CallbackQueryHandler(save_lecturer_callback, pattern='^save_lecturer_yes|save_lecturer_no$')],
    },
    fallbacks=[MessageHandler(filters.COMMAND, exit_conversation)],
    allow_reentry=True,
    per_message=False,
    per_user=True,
    per_chat=True,
    name="lecturer_conversation"
)