from sqlalchemy import func
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatMemberStatus, ChatType
from telegram.ext import CallbackQueryHandler, CommandHandler, MessageHandler, filters

from database.models import Note
from .common import *

CHOOSE_ACTION, ENTER_SUBJECT, ENTER_DATE, ENTER_NOTE, CONFIRM_DELETE = range(5)

async def notes_callback(update: Update, _context: ApplicationContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notes"""

    keyboard = [
        [
            InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note"),
            InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏", callback_data="view_notes")
        ],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="delete_note")]
    ]
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSE_ACTION

async def action_handler(update: Update, context: ApplicationContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    query = update.callback_query
    
    await query.answer()
    
    action = query.data
    if action == "add_note":
        # TODO: add decorator
        if update.effective_chat.type != ChatType.PRIVATE:
            # Check for permissions in groups
            member = await update.effective_chat.get_member(update.effective_user.id)
            if member.status not in [ChatMemberStatus.OWNER, ChatMemberStatus.ADMINISTRATOR]:
                await update.message.reply_text(
                    "–í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã."
                )
                return END

        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
        return ENTER_SUBJECT
    elif action == "view_notes":
        return await show_notes(update, context)
    elif action == "delete_note":
        return await show_notes_for_deletion(update, context)
    
    return END

async def title_handler(update: Update, context: ApplicationContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    context.user_data.note = Note(title=update.message.text[:250])
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):"
    )
    return ENTER_DATE

async def date_handler(update: Update, context: ApplicationContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    
    text = update.message.text or ""
    
    try:
        note_date = datetime.strptime(text, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì"
        )
        return ENTER_DATE

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 14 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    today = datetime.now().date()
    max_date = today + timedelta(days=14)
    
    if note_date > max_date:
        await update.message.reply_text(
            "–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 14 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥.\n"
            + f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {max_date.strftime('%d.%m.%Y')}"
        )
        return ENTER_DATE
        
    if note_date < today:
        await update.message.reply_text(
            "–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã.\n"
            + f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {today.strftime('%d.%m.%Y')}"
        )
        return ENTER_DATE
    
    context.user_data.note.timestamp = note_date
    
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
    return ENTER_NOTE

async def add_note(note: Note) -> bool:
    filter_by = Note.chat_id == note.chat_id if note.chat_id is not None else Note.user_id == note.user_id
    stmt = select(func.count(Note.id)).where(filter_by)

    async for session in create_session():
        async with session.begin():
            result = await session.execute(stmt)
            note_count = result.scalar() or 0
            if note_count > 6:
                return False
            
            
            session.add(note)
            await session.commit()
            
    return True

async def note_handler(update: Update, context: ApplicationContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏"""

    note = context.user_data.note
    assert note
    note.text = update.message.text[:500]
    note.user_id = update.effective_user.id
    note.chat_id = update.effective_chat.id if update.effective_chat.type != ChatType.PRIVATE else None
    
    success = await add_note(note)

    if success:
        await update.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–º–µ—Ç–æ–∫."
        )

    return END

async def get_notes(user_id: int, chat_id: int | None):
    filter_by = Note.chat_id == chat_id if chat_id is not None else Note.user_id == user_id
    stmt = select(Note).where(filter_by).order_by(Note.timestamp.desc())
    
    async for session in create_session():
        async with session.begin():
            return (await session.execute(stmt)).scalars().all()
        
async def show_notes(update: Update, context: ApplicationContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    await update.callback_query.answer()

    user_id = update.effective_user.id
    chat_id = update.effective_chat.id if update.effective_chat.type != ChatType.PRIVATE else None
    
    notes = await get_notes(user_id, chat_id)
    
    if not notes:
        await update.callback_query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return END
    
    text = "üìù –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
    for note in notes:
        text += (
            f"üìÖ {note.timestamp}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {note.title}\n"
            f"‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∞: {note.text}\n"
        )
    
    await update.callback_query.edit_message_text(text)
    return END

async def show_notes_for_deletion(update: Update, context: ApplicationContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    
    await update.callback_query.answer()

    user_id = update.effective_user.id
    chat_id = update.effective_chat.id if update.effective_chat.type != ChatType.PRIVATE else None
    
    notes = await get_notes(user_id, chat_id)
    
    if not notes:
        await update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return END
    
    keyboard: list[list[InlineKeyboardButton]] = []
    for note in notes:
        timestamp_str = note.timestamp.strftime("%d.%m.%Y")
        text = f"{timestamp_str} - {note.title}"
        keyboard.append([InlineKeyboardButton(text, callback_data=f"del_{note.id}")])
    
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRM_DELETE

async def delete_note(note_id: int, user_id: int) -> bool:
    async for session in create_session():
        async with session.begin():
            row = await session.get(Note, note_id)
            
            if row and row.user_id == user_id:
                await session.delete(row)
                await session.commit()
                return True
            
    return False
            

async def delete_note_handler(update: Update, context: ApplicationContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""

    query = update.callback_query
    user_id = update.effective_user.id
    
    await query.answer()
    
    note_id = int(query.data.split('_')[1])
    user_id = update.effective_user.id
    
    if await delete_note(note_id, user_id):
        await query.edit_message_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.")
    
    return END

notes_handler = ConversationHandler(
    entry_points=[CommandHandler('notes', notes_callback)],
    states={
        CHOOSE_ACTION: [CallbackQueryHandler(action_handler, pattern="^(add_note|view_notes|delete_note)$")],
        ENTER_SUBJECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, title_handler)],
        ENTER_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_handler)],
        ENTER_NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, note_handler)],
        CONFIRM_DELETE: [CallbackQueryHandler(delete_note_handler, pattern="^del_[0-9]+$")]
    },
    fallbacks=[MessageHandler(filters.COMMAND, exit_conversation)],
    per_message=False,
    per_user=True,
    per_chat=True,
    name="notes_conversation"
)