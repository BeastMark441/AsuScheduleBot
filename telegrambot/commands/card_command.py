import json
import logging
from pathlib import Path
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import CallbackQueryHandler, CommandHandler, ConversationHandler, MessageHandler, filters
from .common import *

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_OTHER_GROUP = 1
WAITING_FOR_BUTTON = 2

async def card_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /card - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Ö–∫–∞—Ä—Ç—É –≥—Ä—É–ø–ø—ã"""
    if not ((message := update.message) and (user := message.from_user)):
        return END
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É: –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é
    group_name = None
    
    if context.args:  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        input_group = ''.join(context.args)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ö. –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        group_name = f"–ö.{input_group}" if not input_group.startswith('–ö.') else input_group
        return await show_techcard(update, context, group_name)
    else:  # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        group_name = DATABASE.get_group(user.id)
        if not group_name:
            await message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /schedule —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É, "
                "–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /card 305—Å11-4"
            )
            return END
        return await show_techcard(update, context, group_name)

async def show_techcard(update: Update, context: ContextTypes.DEFAULT_TYPE, group_name: str) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Ö–∫–∞—Ä—Ç—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    message = update.callback_query.message if update.callback_query else update.message
    if not message:
        return END
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ö–∫–∞—Ä—Ç
    techcards_path = Path(__file__).parent.parent / "data" / "techcards.json"
    try:
        with open(techcards_path, 'r', encoding='utf-8') as f:
            techcards = json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Ö–∫–∞—Ä—Ç: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–µ—Ö–∫–∞—Ä—Ç—ã.")
        return END
    
    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã
    techcard_url = techcards.get(group_name)
    if techcard_url:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = [[InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –¥–ª—è –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã", callback_data="find_other")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.reply_text(
            f"üìö –¢–µ—Ö–∫–∞—Ä—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}:\n"
            f"<a href='{techcard_url}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ</a>",
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
        return WAITING_FOR_BUTTON
    else:
        await message.reply_text(
            f"–î–ª—è –≥—Ä—É–ø–ø—ã {group_name} —Ç–µ—Ö–∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        )
        return END

async def find_other_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–π—Ç–∏ –¥–ª—è –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã'"""
    if not (query := update.callback_query):
        return END
    
    await query.answer()
    await query.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 305—Å11-4):"
    )
    return GET_OTHER_GROUP

async def get_other_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã"""
    if not ((message := update.message) and (group_name := message.text)):
        return END
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ö. –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    group_name = f"–ö.{group_name}" if not group_name.startswith('–ö.') else group_name
    return await show_techcard(update, context, group_name)

# –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã card
card_handler = ConversationHandler(
    entry_points=[
        CommandHandler("card", card_callback),
    ],
    states={
        GET_OTHER_GROUP: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, get_other_group)
        ],
        WAITING_FOR_BUTTON: [
            CallbackQueryHandler(find_other_callback, pattern="^find_other$")
        ]
    },
    fallbacks=[MessageHandler(filters.COMMAND, lambda u, c: END)],
    allow_reentry=True,
    name="card_conversation"
) 