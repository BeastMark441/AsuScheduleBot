import html
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Message, Update
from telegram.constants import ParseMode
from telegram.ext import CallbackQueryHandler, CommandHandler, ConversationHandler, MessageHandler, filters
from .common import *

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_OTHER_GROUP = 1
WAITING_FOR_BUTTON = 2

async def card_callback(update: Update, context: ApplicationContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /card - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Ö–∫–∞—Ä—Ç—É –≥—Ä—É–ø–ø—ã"""

    if context.args:
        group_name = ''.join(context.args)
        group = await find_group_by_name(group_name)
        
        if group is None:
            await update.message.reply_text("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return END
    else:
        group = await get_saved_group(update.effective_user)
        if group is None:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /schedule —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É, –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /card 305—Å11-4")
            return END
    
    return await show_techcard(update, context, group)

async def find_group_by_name(group_name: str) -> models.Group | None:
    group_name = group_name[:50] # Limit to 50 symbols
    
    if not group_name:
        return None
    
    async for session in create_session():
        async with session.begin():
            group = await session.scalar(select(models.Group).where(models.Group.name.like("%{}%".format(group_name))))
            
            return group
        
    return None

async def show_techcard(update: Update, context: ApplicationContext, group: models.Group) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Ö–∫–∞—Ä—Ç—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    
    message = update.callback_query.message if update.callback_query else update.message
    
    if message is None or not isinstance(message, Message):
        return END
    
    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã
    techcard_url = group.technical_cards_link
    if techcard_url:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = [[InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –¥–ª—è –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã", callback_data="find_other")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.reply_text(
            f"üìö –¢–µ—Ö–∫–∞—Ä—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.name}:\n"
            + f"<a href='{html.escape(techcard_url)}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ</a>",
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
        return WAITING_FOR_BUTTON
    else:
        await message.reply_text(
            f"–î–ª—è –≥—Ä—É–ø–ø—ã {group.name} —Ç–µ—Ö–∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        )
        return END

async def find_other_callback(update: Update, context: ApplicationContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–π—Ç–∏ –¥–ª—è –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã'"""

    await update.callback_query.answer()
    
    await update.callback_query.message.chat.send_message("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 305—Å11-4):")
    return GET_OTHER_GROUP

async def get_other_group(update: Update, context: ApplicationContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã"""
    
    text = update.message.text or ""
    group = await find_group_by_name(text)
    
    if group is None:
        await update.message.reply_text(f"–ì—Ä—É–ø–ø–∞ {text} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return END

    return await show_techcard(update, context, group)

card_handler = ConversationHandler(
    entry_points=[CommandHandler("card", card_callback)],
    states={
        GET_OTHER_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_other_group)],
        WAITING_FOR_BUTTON: [CallbackQueryHandler(find_other_callback, pattern="^find_other$")]
    },
    fallbacks=[MessageHandler(filters.COMMAND, exit_conversation)],
    allow_reentry=True,
    per_message=False,
    per_user=True,
    per_chat=True,
    name="card_conversation"
) 