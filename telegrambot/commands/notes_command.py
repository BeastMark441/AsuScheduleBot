from datetime import datetime, date
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler, 
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from telegram.error import TelegramError
from .common import DATABASE, END
from .admin_command import ADMIN_IDS

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CHOOSE_ACTION = 1
ENTER_SUBJECT = 2
ENTER_DATE = 3
ENTER_NOTE = 4
CONFIRM_DELETE = 5

async def notes_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notes"""
    if not ((message := update.message) and (user := message.from_user)):
        return END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
    if message.chat.type != 'private':
        member = await message.chat.get_member(user.id)
        if member.status not in ['creator', 'administrator'] and user.id not in ADMIN_IDS:
            await message.reply_text(
                "–í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã."
            )
            return END

    keyboard = [
        [
            InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note"),
            InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏", callback_data="view_notes")
        ],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="delete_note")]
    ]
    
    await message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSE_ACTION

async def action_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    if not (query := update.callback_query):
        return END
        
    await query.answer()
    
    action = query.data
    if action == "add_note":
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
        return ENTER_SUBJECT
    elif action == "view_notes":
        return await show_notes(update, context)
    elif action == "delete_note":
        return await show_notes_for_deletion(update, context)
    
    return END

async def subject_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    if not update.message:
        return END
        
    if not context.user_data:
        context.user_data.clear()  # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å
        
    context.user_data['subject'] = update.message.text
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):"
    )
    return ENTER_DATE

async def date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    if not update.message or not update.message.text:
        return END
        
    try:
        note_date = datetime.strptime(update.message.text, "%d.%m.%Y").date()
        context.user_data['note_date'] = note_date
        
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
        return ENTER_NOTE
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì"
        )
        return ENTER_DATE

async def note_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏"""
    if not (update.message and update.effective_user and update.effective_chat):
        return END
        
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    if not all(key in context.user_data for key in ['subject', 'note_date']):
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
        return END
    
    success = DATABASE.add_note(
        user_id=user_id,
        chat_id=chat_id,
        subject=context.user_data['subject'],
        note_text=update.message.text,
        note_date=context.user_data['note_date']
    )
    
    if success:
        await update.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–º–µ—Ç–æ–∫."
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    context.user_data.clear()
    return END

async def show_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not (query := update.callback_query):
        return END
        
    if not update.effective_user or not update.effective_chat:
        await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return END
        
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    notes = DATABASE.get_notes(user_id, chat_id)
    
    if not notes:
        await query.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return END
    
    text = "üìù –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
    for note in notes:
        note_id, subject, note_text, note_date, author_id = note
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if isinstance(note_date, str):
            try:
                note_date = datetime.strptime(note_date, '%Y-%m-%d').date()
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
                formatted_date = note_date
            else:
                formatted_date = note_date.strftime('%d.%m.%Y')
        else:
            formatted_date = note_date.strftime('%d.%m.%Y')
            
        text += (
            f"üìÖ {formatted_date}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            f"‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∞: {note_text}\n"
            f"üÜî ID: {note_id}\n\n"
        )
    
    await query.message.edit_text(text)
    return END

async def show_notes_for_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not (query := update.callback_query):
        return END
        
    if not update.effective_user or not update.effective_chat:
        await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return END
        
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    notes = DATABASE.get_notes(user_id, chat_id)
    
    if not notes:
        await query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return END
    
    keyboard = []
    for note in notes:
        note_id, subject, _, note_date, _ = note
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if isinstance(note_date, str):
            try:
                note_date = datetime.strptime(note_date, '%Y-%m-%d').date()
                formatted_date = note_date.strftime('%d.%m.%Y')
            except ValueError:
                formatted_date = note_date
        else:
            formatted_date = note_date.strftime('%d.%m.%Y')
            
        text = f"{formatted_date} - {subject}"
        keyboard.append([InlineKeyboardButton(text, callback_data=f"del_{note_id}")])
    
    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRM_DELETE

async def delete_note_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    note_id = int(query.data.split('_')[1])
    user_id = update.effective_user.id
    
    if DATABASE.delete_note(note_id, user_id):
        await query.message.edit_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.")
    
    return END

async def cancel_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        await update.message.reply_text("–†–∞–±–æ—Ç–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return END

# –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã notes
notes_handler = ConversationHandler(
    entry_points=[CommandHandler('notes', notes_callback)],
    states={
        CHOOSE_ACTION: [
            CallbackQueryHandler(action_handler, pattern="^(add_note|view_notes|delete_note)$")
        ],
        ENTER_SUBJECT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, subject_handler)
        ],
        ENTER_DATE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, date_handler)
        ],
        ENTER_NOTE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, note_handler)
        ],
        CONFIRM_DELETE: [
            CallbackQueryHandler(delete_note_handler, pattern="^del_[0-9]+$")
        ]
    },
    fallbacks=[MessageHandler(filters.COMMAND, cancel_notes)],
    per_message=False,
    per_user=True,
    per_chat=True,
    name="notes_conversation"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–º–µ—Ç–æ–∫
async def cleanup_notes(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–º–µ—Ç–∫–∏"""
    DATABASE.cleanup_old_notes() 