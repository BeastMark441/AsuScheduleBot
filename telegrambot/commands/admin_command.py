import logging
import asyncio
from telegram import Update
from telegram.ext import CommandHandler, ContextTypes
from telegram.error import TelegramError
from telegram.constants import ParseMode
from .common import DATABASE
from functools import lru_cache
from typing import Set
from config import ADMIN_IDS

# –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ 5 –º–∏–Ω—É—Ç
@lru_cache(maxsize=1, typed=False)
def get_chat_ids() -> Set[int]:
    users = DATABASE.get_all_users()
    return {user[0] for user in users}

async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –±–æ—Ç–∞
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>
    """
    if not ((message := update.message) and (user := update.effective_user)):
        return
        
    if user.id not in ADMIN_IDS:
        await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /admin –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if not context.args:
        users = DATABASE.get_all_users()
        stats = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
            f"–° —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π: {sum(1 for u in users if u[1])}\n"
            f"–° —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º: {sum(1 for u in users if u[2])}"
        )
        await message.reply_text(stats)
        return

    broadcast_message = ' '.join(context.args)
    
    try:
        chat_ids = get_chat_ids()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        
        if not chat_ids:
            await message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return

        successful = failed = 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.gather –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        tasks = []
        for chat_id in chat_ids:
            task = context.bot.send_message(
                chat_id=chat_id,
                text="üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n" + broadcast_message,
                parse_mode=ParseMode.HTML
            )
            tasks.append(task)
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        for result in results:
            if isinstance(result, Exception):
                failed += 1
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
            else:
                successful += 1
        
        await message.reply_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
            f"‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {failed}\n"
            f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(chat_ids)}"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def send_to_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send_to
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_to <user_id> <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>
    """
    if not ((message := update.message) and (user := update.effective_user)):
        return
        
    if user.id not in ADMIN_IDS:
        await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args or len(context.args) < 2:
        await message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_to <user_id> <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>\n"
            "–ü—Ä–∏–º–µ—Ä: /send_to 123456789 –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!"
        )
        return
        
    try:
        target_user_id = int(context.args[0])
        text_message = ' '.join(context.args[1:])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        users = DATABASE.get_all_users()
        if not any(user[0] == target_user_id for user in users):
            await message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=target_user_id,
            text=text_message,
            parse_mode=ParseMode.HTML
        )
        
        await message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
        
    except ValueError:
        await message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except TelegramError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {str(e)}"
        logging.error(error_msg)
        await message.reply_text(error_msg)
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
admin_handler = CommandHandler("admin", admin_callback)
send_to_handler = CommandHandler("send_to", send_to_callback) 