import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, ContextTypes, CallbackQueryHandler
from telegram.error import TelegramError
from telegram.constants import ParseMode
from .common import DATABASE
from functools import lru_cache
from typing import Set
from config import BOT_ADMIN_IDS, AdminRights, check_admin_rights

# –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ 5 –º–∏–Ω—É—Ç
@lru_cache(maxsize=1, typed=False)
def get_chat_ids() -> Set[int]:
    users = DATABASE.get_all_users()
    return {user[0] for user in users}

async def check_admin_rights(update: Update, user_id: int, required_right: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    update: Update –æ–±—ä–µ–∫—Ç –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    required_right: –¢—Ä–µ–±—É–µ–º–æ–µ –ø—Ä–∞–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'can_broadcast')
    """
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ - —É –Ω–µ–≥–æ –µ—Å—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∞
    if user_id in BOT_ADMIN_IDS:
        return AdminRights.BOT_ADMIN.get(required_right, False)
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
    if update.effective_chat and update.effective_chat.type != 'private':
        try:
            member = await update.effective_chat.get_member(user_id)
            is_chat_admin = member.status in ['creator', 'administrator']
            if is_chat_admin:
                return AdminRights.CHAT_ADMIN.get(required_right, False)
        except Exception:
            return False
            
    return False

async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –±–æ—Ç–∞
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>
    """
    if not ((message := update.message) and (user := update.effective_user)):
        return
        
    if not await check_admin_rights(update, user.id, 'can_broadcast'):
        await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /admin –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if not context.args:
        users = DATABASE.get_all_users()
        stats = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
            f"üìö –° —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π: {sum(1 for u in users if u[1])}\n\n"
            f"üë®‚Äçüè´ –° —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º: {sum(1 for u in users if u[2])}"
        )
        await message.reply_text(stats, parse_mode=ParseMode.HTML)
        return

    broadcast_message = ' '.join(context.args)
    
    # –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    broadcast_message = broadcast_message.replace('\\n', '\n')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    formatted_message = (
        f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n"
        f"{'‚îÄ' * 32}\n\n"
        f"{broadcast_message}\n\n"
        f"{'‚îÄ' * 32}\n"
        f"<i>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞</i>"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"broadcast_confirm_{user.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"broadcast_cancel_{user.id}")
        ]
    ]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if not context.user_data:
        context.user_data.clear()
    context.user_data.update({'broadcast_message': formatted_message})
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    preview = (
        f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        f"{formatted_message}\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?"
    )
    
    await message.reply_text(
        preview,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

async def broadcast_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not (query := update.callback_query):
        return
        
    await query.answer()
    
    action, admin_id = query.data.split('_')[1:]
    if int(admin_id) != update.effective_user.id:
        await query.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
        return
        
    if action == 'cancel':
        await query.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        if context.user_data:
            context.user_data.pop('broadcast_message', None)
        return
        
    if not context.user_data or 'broadcast_message' not in context.user_data:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
        
    broadcast_message = context.user_data['broadcast_message']
    try:
        chat_ids = get_chat_ids()
        
        if not chat_ids:
            await query.message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return

        successful = failed = 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.gather –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        tasks = []
        for chat_id in chat_ids:
            task = context.bot.send_message(
                chat_id=chat_id,
                text=broadcast_message,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
            tasks.append(task)
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        for result in results:
            if isinstance(result, Exception):
                failed += 1
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
            else:
                successful += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
        stats = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
            f"‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {failed}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(chat_ids)}"
        )
        
        await query.message.edit_text(
            stats,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        await query.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.</b>\n"
            f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: <code>{str(e)}</code>",
            parse_mode=ParseMode.HTML
        )
    finally:
        if context.user_data:
            context.user_data.pop('broadcast_message', None)

async def send_to_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send_to
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_to <user_id> <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>
    """
    if not ((message := update.message) and (user := update.effective_user)):
        return
        
    if not await check_admin_rights(update, user.id, 'can_send_to'):
        await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args or len(context.args) < 2:
        usage_text = (
            "‚ÑπÔ∏è <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "/send_to <code>user_id</code> <code>—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</code>\n\n"
            "üìù <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "/send_to 123456789 –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞.\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —ç–º–æ–¥–∑–∏\n"
            "‚Ä¢ –î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \\n"
        )
        await message.reply_text(usage_text, parse_mode=ParseMode.HTML)
        return
        
    try:
        target_user_id = int(context.args[0])
        text_message = ' '.join(context.args[1:])
        
        # –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text_message = text_message.replace('\\n', '\n')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = (
            f"üì¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n"
            f"{'‚îÄ' * 32}\n\n"
            f"{text_message}\n\n"
            f"{'‚îÄ' * 32}\n"
            f"<i>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞</i>"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        users = DATABASE.get_all_users()
        if not any(user[0] == target_user_id for user in users):
            await message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = await context.bot.send_message(
            chat_id=target_user_id,
            text=formatted_message,
            parse_mode=ParseMode.HTML
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        confirmation = (
            f"‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>\n\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>{target_user_id}</code>\n"
            f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
            f"{formatted_message}"
        )
        
        await message.reply_text(
            confirmation,
            parse_mode=ParseMode.HTML
        )
        
    except ValueError:
        await message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.",
            parse_mode=ParseMode.HTML
        )
    except TelegramError as e:
        error_msg = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{target_user_id}</code>\n"
            f"‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: <code>{str(e)}</code>"
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        await message.reply_text(
            error_msg,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n"
            f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: <code>{str(e)}</code>",
            parse_mode=ParseMode.HTML
        )

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
admin_handler = CommandHandler("admin", admin_callback)
send_to_handler = CommandHandler("send_to", send_to_callback)
broadcast_handler = CallbackQueryHandler(
    broadcast_callback,
    pattern="^broadcast_(confirm|cancel)_[0-9]+$"
) 