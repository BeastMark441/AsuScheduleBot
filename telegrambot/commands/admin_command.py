import logging
from telegram import Update
from telegram.ext import CommandHandler, ContextTypes
from telegram.error import TelegramError
from telegram.constants import ParseMode
from .common import DATABASE

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ .env)
ADMIN_IDS = {983524946, 833357373, 5967050779}  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –±–æ—Ç–∞
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>
    """
    if not ((message := update.message) and (user := update.effective_user)):
        return
        
    if user.id not in ADMIN_IDS:
        await message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /admin –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if not context.args:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        current_chat_info = (
            f"–¢–µ–∫—É—â–∏–π —á–∞—Ç:\n"
            f"chat_id: {message.chat.id}\n"
            f"user_id: {user.id}\n"
            f"username: {user.username}\n"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        users = DATABASE.get_all_users()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –Ω–∞ —á–∞—Å—Ç–∏
        users_info = []
        current_part = []
        
        for user in users:
            user_str = (
                f"ID: {user[0]}, "
                f"Username: {user[1] or '–Ω–µ—Ç'}, "
                f"–ò–º—è: {user[2] or '–Ω–µ—Ç'}, "
                f"–§–∞–º–∏–ª–∏—è: {user[3] or '–Ω–µ—Ç'}, "
                f"–ì—Ä—É–ø–ø–∞: {user[4] or '–Ω–µ—Ç'}, "
                f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {user[5] or '–Ω–µ—Ç'}"
            )
            
            if len("\n".join(current_part + [user_str])) > 3000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –¥–æ–ø. —Ç–µ–∫—Å—Ç–∞
                users_info.append("\n".join(current_part))
                current_part = [user_str]
            else:
                current_part.append(user_str)
                
        if current_part:
            users_info.append("\n".join(current_part))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>\n\n"
            "–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"{current_chat_info}\n"
            f"–î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã:\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —á–∞—Å—Ç—è–º–∏
        for part in users_info:
            await message.reply_text(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{part}")
        return

    broadcast_message = ' '.join(context.args)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = DATABASE.get_all_users()
        chat_ids = {user[0] for user in users}  # user[0] —ç—Ç–æ user_id
        
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        logging.info(f"–°–ø–∏—Å–æ–∫ ID –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {chat_ids}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    if not chat_ids:
        await message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    successful = 0
    failed = 0
    failed_ids = []

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–∂–¥—ã–π —á–∞—Ç
    for chat_id in chat_ids:
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
            formatted_message = "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n" + broadcast_message
            
            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            await context.bot.send_message(
                chat_id=chat_id,
                text=formatted_message,
                parse_mode=ParseMode.HTML
            )
            successful += 1
            logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        except TelegramError as e:
            failed += 1
            failed_ids.append(chat_id)
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {str(e)}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    status_message = (
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
        f"‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {failed}\n"
        f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(chat_ids)}\n"
        f"‚ùå ID —Å –æ—à–∏–±–∫–∞–º–∏: {failed_ids if failed_ids else '–Ω–µ—Ç'}"
    )
    logging.info(status_message)
    await message.reply_text(status_message)

admin_handler = CommandHandler("admin", admin_callback) 