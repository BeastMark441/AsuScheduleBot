from datetime import datetime, timedelta
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ContextTypes, 
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º END –∏–∑ ConversationHandler
END = ConversationHandler.END

from config import check_admin_rights
from database.mariadb import MariaDB
from config.database import MARIADB_CONFIG

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_PERIOD = 1

async def stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    if not update.effective_user or not update.message:
        return END
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if not await check_admin_rights(update, update.effective_user.id, 'can_view_stats'):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return END

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    keyboard = [
        [InlineKeyboardButton("–ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="stats_1")],
        [InlineKeyboardButton("–ó–∞ 3 –¥–Ω—è", callback_data="stats_3")],
        [InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_7")]
    ]
    
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return WAITING_PERIOD

async def period_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not (query := update.callback_query):
        return END
        
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ callback_data
    days = int(query.data.split('_')[1])
    
    end_date = datetime.now().date()
    start_date = end_date - timedelta(days=days-1)  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –≤–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    
    db = MariaDB(**MARIADB_CONFIG)
    stats = db.get_daily_statistics(start_date, end_date)
    
    if not stats:
        await query.message.edit_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞.")
        return END
        
    period_text = {
        1: "—Å–µ–≥–æ–¥–Ω—è",
        3: "–∑–∞ 3 –¥–Ω—è",
        7: "–∑–∞ –Ω–µ–¥–µ–ª—é"
    }
    
    message = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_text[days]}:</b>\n\n"
    
    total_requests = 0
    total_successful = 0
    total_failed = 0
    unique_users = set()
    all_commands = {}
    all_groups = {}
    all_lecturers = {}
    
    for day_stats in stats:
        message += (
            f"<b>{day_stats['date'].strftime('%d.%m.%Y')}</b>\n"
            f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {day_stats['unique_users']}\n"
            f"üìù –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {day_stats['total_requests']}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {day_stats['successful_requests']}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {day_stats['failed_requests']}\n"
            f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {day_stats['avg_response_time']:.2f}s\n\n"
        )
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_requests += day_stats['total_requests']
        total_successful += day_stats['successful_requests']
        total_failed += day_stats['failed_requests']
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        if day_stats['most_used_commands']:
            commands = json.loads(day_stats['most_used_commands'])
            for cmd, count in commands:
                all_commands[cmd] = all_commands.get(cmd, 0) + count
                
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–ø–ø–∞–º
        if day_stats['most_searched_groups']:
            groups = json.loads(day_stats['most_searched_groups'])
            for group, count in groups:
                all_groups[group] = all_groups.get(group, 0) + count
                
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º
        if day_stats['most_searched_lecturers']:
            lecturers = json.loads(day_stats['most_searched_lecturers'])
            for lecturer, count in lecturers:
                all_lecturers[lecturer] = all_lecturers.get(lecturer, 0) + count
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
    message += (
        f"<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:</b>\n"
        f"üìù –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {total_successful}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {total_failed}\n\n"
    )
    
    # –¢–æ–ø-5 –∫–æ–º–∞–Ω–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥
    if all_commands:
        message += "üîù <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        for cmd, count in sorted(all_commands.items(), key=lambda x: x[1], reverse=True)[:5]:
            message += f"/{cmd}: {count} —Ä–∞–∑\n"
        message += "\n"
    
    # –¢–æ–ø-5 –≥—Ä—É–ø–ø –∑–∞ –ø–µ—Ä–∏–æ–¥
    if all_groups:
        message += "üë• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥—Ä—É–ø–ø—ã:</b>\n"
        for group, count in sorted(all_groups.items(), key=lambda x: x[1], reverse=True)[:5]:
            message += f"{group}: {count} —Ä–∞–∑\n"
        message += "\n"
    
    # –¢–æ–ø-5 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
    if all_lecturers:
        message += "üë®‚Äçüè´ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:</b>\n"
        for lecturer, count in sorted(all_lecturers.items(), key=lambda x: x[1], reverse=True)[:5]:
            message += f"{lecturer}: {count} —Ä–∞–∑\n"
        message += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    keyboard = [
        [InlineKeyboardButton("üìä –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="stats_new")]
    ]
    
    await query.message.edit_text(
        message, 
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return END

async def new_period_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    if not (query := update.callback_query):
        return END
        
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("–ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="stats_1")],
        [InlineKeyboardButton("–ó–∞ 3 –¥–Ω—è", callback_data="stats_3")],
        [InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_7")]
    ]
    
    await query.message.edit_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return WAITING_PERIOD

# –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã stats
stats_handler = ConversationHandler(
    entry_points=[CommandHandler("stats", stats_callback)],
    states={
        WAITING_PERIOD: [
            CallbackQueryHandler(period_handler, pattern="^stats_[137]$"),
            CallbackQueryHandler(new_period_handler, pattern="^stats_new$")
        ]
    },
    fallbacks=[],
    per_message=False,
    per_user=True,
    per_chat=True,
    name="stats_conversation"
) 