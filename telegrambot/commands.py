import asyncio
from datetime import datetime, timedelta
import telegram
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)
import asu
from asu import Group, Lecturer
from telegrambot.database import Database
from utils.daterange import DateRange

END = ConversationHandler.END
GET_GROUP_NAME, SHOW_SCHEDULE, SAVE_GROUP, GET_LECTURER_NAME, SHOW_LECTURER_SCHEDULE, SAVE_LECTURER, CHOOSE_SCHEDULE_TYPE = range(7)

SELECTED_SCHEDULE = 'schedule'

database = Database()

async def start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if ((message := update.message) and (user := message.from_user)):
        _ = await message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ê–ª—Ç–ì–£.\n"
        + "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n"
        + "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –∏–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏, –Ω–∞–ø–∏—à–∏ –Ω–∞–º.\n"
        + "–ö–æ–Ω—Ç–∞–∫—Ç—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞")

async def schedule_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule"""
    
    if not ((message := update.message) and (user := message.from_user)):
        return END
    
    # If user enters group name after the command, then search for it
    # If no input, then use saved, otherwise ask user to enter group
    
    group_name: str
    
    if context.args:
        group_name = ''.join(context.args)
    elif (group_name := database.get_group(user.id)): # pyright: ignore
        _ = await update.message.reply_text(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: {group_name}")
    else:
        _ = await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
        return GET_GROUP_NAME
    
    return await handle_schedule(update, context, group_name)

async def get_group_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    
    if not ((message := update.message) and (group_name := message.text)):
        return END
    
    if not group_name:
        _ = await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
        return GET_GROUP_NAME
    
    return await handle_schedule(update, context, group_name)

async def handle_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE, group_name: str) -> int:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    
    schedule = await find_schedule_of_group(group_name)
    if not schedule:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return END
    
    context.user_data[SELECTED_SCHEDULE] = schedule
    
    if not database.get_group(update.message.from_user.id):
        return await ask_to_save_group(update, context, schedule.name)
    
    return await show_schedule_options(update, context)

async def ask_to_save_group(update: Update, context: ContextTypes.DEFAULT_TYPE, group_name: str) -> int:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="save_yes"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="save_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É {group_name} –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –±—É–¥—É—â–µ–º?",
        reply_markup=reply_markup)
    return SAVE_GROUP

async def save_group_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    if not (query := update.callback_query):
        return END
    
    _ = await query.answer()

    if query.data == "save_yes":
        schedule = context.user_data.get(SELECTED_SCHEDULE)
        if isinstance(schedule, Group):
            user_id = update.effective_user.id
            database.save_group(user_id, schedule.name)
            _ = await query.edit_message_text(f"–ì—Ä—É–ø–ø–∞ {schedule.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        else:
            _ = await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")

    return await show_schedule_options(update, context)

async def show_schedule_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="T")],
        [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="M")],
        [InlineKeyboardButton("–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é", callback_data="W")],
        [InlineKeyboardButton("–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", callback_data="NW")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    schedule = context.user_data[SELECTED_SCHEDULE]
    await update.effective_message.reply_text(
            f"üìö –ì—Ä—É–ø–ø–∞ {schedule.name}\n–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
            reply_markup=reply_markup)
    
    return SHOW_SCHEDULE

async def cleansavegroup_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    user_id = update.message.from_user.id
    saved_group = database.get_group(user_id)
    if saved_group:
        database.clear_group(user_id)
        await update.message.reply_text(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ {saved_group} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.")

async def handle_show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""

    if not (query := update.callback_query):
        return END
    
    _ = await query.answer()

    today = datetime.now()
    
    if query.data == 'T': # Today
        target_date = DateRange(today)
    elif query.data == 'M': # Tomorrow
        target_date = DateRange(today + timedelta(days=1))
    elif query.data == 'W': # This Week
        week_start = today - timedelta(days=today.weekday())
        week_end = week_start + timedelta(days=6)
        target_date = DateRange(week_start, week_end)
    else:  # Next Week
        next_week_start = today + timedelta(days=7-today.weekday())
        next_week_end = next_week_start + timedelta(days=6)
        target_date = DateRange(next_week_start, next_week_end)

    selected_schedule: Lecturer | Group = context.user_data[SELECTED_SCHEDULE] # pyright: ignore
    is_lecturer = isinstance(selected_schedule, Lecturer)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

    timetable = await asu.get_timetable(selected_schedule, target_date)
    formatted_timetable = asu.format_schedule(
        timetable,
        selected_schedule.get_schedule_url(),
        selected_schedule.name,
        target_date,
        is_lecturer  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ is_lecturer
    )

    await query.edit_message_text(formatted_timetable, parse_mode=telegram.constants.ParseMode.HTML)

    return END

async def lecturer_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lecturer"""
    
    if not ((message := update.message) and (user := message.from_user)):
        return END
    
    lecturer_name: str
    
    if context.args:
        lecturer_name = ''.join(context.args)
    elif (lecturer_name := database.get_lecturer(user.id)):
        await update.message.reply_text(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lecturer_name}")
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
        return GET_LECTURER_NAME
    
    return await handle_lecturer_schedule(update, context, lecturer_name)

async def get_lecturer_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    
    if not ((message := update.message) and (lecturer_name := message.text)):
        return END
    
    return await handle_lecturer_schedule(update, context, lecturer_name)

async def handle_lecturer_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE, lecturer_name: str) -> int:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    lecturer = await asu.find_lecturer_schedule(lecturer_name)
    if not lecturer:
        await update.message.reply_text(
            "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return END
    
    context.user_data[SELECTED_SCHEDULE] = lecturer
    
    user_id = update.effective_user.id
    if not database.get_lecturer(user_id):
        return await ask_to_save_lecturer(update, context, lecturer.name)
    
    return await show_lecturer_schedule_options(update, context)

async def ask_to_save_lecturer(update: Update, context: ContextTypes.DEFAULT_TYPE, lecturer_name: str) -> int:
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="save_lecturer_yes"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="save_lecturer_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {lecturer_name} –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –±—É–¥—É—â–µ–º?",
        reply_markup=reply_markup
    )
    return SAVE_LECTURER

async def save_lecturer_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not (query := update.callback_query):
        return END
    
    query = update.callback_query
    _ = await query.answer()

    if query.data == "save_lecturer_yes":
        lecturer = context.user_data.get(SELECTED_SCHEDULE)
        if lecturer:
            user_id = update.effective_user.id
            database.save_lecturer(user_id, lecturer.name)
        else:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–∫–∞–∑–∞
    return await show_lecturer_schedule_options(update, context)

async def cleansavelect_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    saved_lecturer = database.get_lecturer(user_id)
    if saved_lecturer:
        database.clear_lecturer(user_id)
        await update.message.reply_text(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {saved_lecturer} —É–¥–∞–ª–µ–Ω.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")

async def show_lecturer_schedule_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑ –æ–ø—Ü–∏–π –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="T")],
        [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="M")],
        [InlineKeyboardButton("–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é", callback_data="W")],
        [InlineKeyboardButton("–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", callback_data="NW")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    lecturer = context.user_data[SELECTED_SCHEDULE]
    await update.effective_message.reply_text(
            f"üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lecturer.name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=reply_markup)
    
    return SHOW_LECTURER_SCHEDULE

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("üë©‚Äçüè´ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="choose_lecturer")],
        [InlineKeyboardButton(" –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", callback_data="choose_group")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.effective_message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=reply_markup)
    return CHOOSE_SCHEDULE_TYPE

async def handle_schedule_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "choose_lecturer":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
        return GET_LECTURER_NAME
    else:  # choose_group
        # –í–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ schedule_callback –Ω–∞–ø—Ä—è–º—É—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
        return GET_GROUP_NAME

async def cancel_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
    query = update.callback_query
    await query.answer()
    return await show_main_menu(update, context)

async def exit_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if context.user_data:
        context.user_data.pop(SELECTED_SCHEDULE)
    return END

async def find_schedule_of_group(group_name: str) -> Group | None:
    # –ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    return await asu.find_schedule_url(group_name)

# –û–±–Ω–æ–≤–ª—è–µ–º ConversationHandler –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø
schedule_handler = ConversationHandler(
    entry_points=[
        CommandHandler("schedule", schedule_callback),
    ],
    states={
        GET_GROUP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_group_name)],
        GET_LECTURER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_lecturer_name)],
        SAVE_GROUP: [CallbackQueryHandler(save_group_callback, pattern='^save_yes|save_no$')],
        SHOW_SCHEDULE: [
            CallbackQueryHandler(handle_show_schedule, pattern='^T|M|W|NW$'),
            CallbackQueryHandler(cancel_schedule, pattern='^cancel$')
        ],
        SHOW_LECTURER_SCHEDULE: [  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            CallbackQueryHandler(handle_show_schedule, pattern='^T|M|W|NW$'),
            CallbackQueryHandler(cancel_schedule, pattern='^cancel$')
        ],
        CHOOSE_SCHEDULE_TYPE: [
            CallbackQueryHandler(handle_schedule_choice, pattern='^choose_(lecturer|group)$')
        ],
    },
    fallbacks=[MessageHandler(filters.COMMAND, exit_conversation)],
    allow_reentry=True,
    # https://github.com/python-telegram-bot/python-telegram-bot/wiki/Frequently-Asked-Questions#what-do-the-per_-settings-in-conversationhandler-do
    per_message=False,
    per_user=False,
    name="schedule_conversation"
)

# –û–±–Ω–æ–≤–ª—è–µ–º ConversationHandler –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
lecturer_handler = ConversationHandler(
    entry_points=[CommandHandler("lecturer", lecturer_callback)],
    states={
        GET_LECTURER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_lecturer_name)],
        GET_GROUP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_group_name)],
        SHOW_LECTURER_SCHEDULE: [
            CallbackQueryHandler(handle_show_schedule, pattern='^T|M|W|NW$'),
            CallbackQueryHandler(cancel_schedule, pattern='^cancel$')
        ],
        SHOW_SCHEDULE: [  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            CallbackQueryHandler(handle_show_schedule, pattern='^T|M|W|NW$'),
            CallbackQueryHandler(cancel_schedule, pattern='^cancel$')
        ],
        SAVE_LECTURER: [CallbackQueryHandler(save_lecturer_callback, pattern='^save_lecturer_yes|save_lecturer_no$')],
        CHOOSE_SCHEDULE_TYPE: [
            CallbackQueryHandler(handle_schedule_choice, pattern='^choose_(lecturer|group)$')
        ],
    },
    fallbacks=[MessageHandler(filters.COMMAND, exit_conversation)],
    allow_reentry=True,
    # https://github.com/python-telegram-bot/python-telegram-bot/wiki/Frequently-Asked-Questions#what-do-the-per_-settings-in-conversationhandler-do
    per_message=False,
    per_user=False,
    name="lecturer_conversation"
)
