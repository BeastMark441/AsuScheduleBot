import asyncio
from datetime import datetime, timedelta
from typing import Optional, Union, NamedTuple
import telegram
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, ConversationHandler
import asu
from asu import Schedule

END = ConversationHandler.END
GET_GROUP_NAME, SHOW_SCHEDULE, SAVE_GROUP = range(3)

SELECTED_SCHEDULE = 'schedule'

class ScheduleRequest(NamedTuple):
    date: datetime
    is_week_request: bool = False

def get_next_weekday(d, weekday):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    days_ahead = weekday - d.weekday()
    if days_ahead <= 0:  # Target day already happened this week
        days_ahead += 7
    return d + timedelta(days=days_ahead)

async def start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ê–ª—Ç–ì–£.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –∏–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏, –Ω–∞–ø–∏—à–∏ –Ω–∞–º.\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞"
    )

async def schedule_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule
    user_id = update.effective_user.id
    db = context.bot_data['db']
    saved_group = db.get_group(user_id)
    if saved_group:
        await update.message.reply_text(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: {saved_group}")
        return await handle_schedule(update, context, saved_group)
    
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
        return GET_GROUP_NAME
    
    group_name = ' '.join(context.args)
    return await handle_schedule(update, context, group_name)

async def get_group_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    group_name = update.message.text
    if not group_name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.")
        return GET_GROUP_NAME
    return await handle_schedule(update, context, group_name)

async def handle_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE, group_name: str) -> int:
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule = await find_schedule_of_group(group_name)
    if not schedule:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return END
    
    context.user_data[SELECTED_SCHEDULE] = schedule
    
    user_id = update.effective_user.id
    db = context.bot_data['db']
    if not db.get_group(user_id):
        return await ask_to_save_group(update, context, schedule.name)
    
    return await show_schedule_options(update, context)

async def ask_to_save_group(update: Update, context: ContextTypes.DEFAULT_TYPE, group_name: str) -> int:
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="save_yes"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="save_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É {group_name} –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –±—É–¥—É—â–µ–º?",
        reply_markup=reply_markup
    )
    return SAVE_GROUP

async def save_group_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
    query = update.callback_query
    await query.answer()

    if query.data == "save_yes":
        schedule = context.user_data.get(SELECTED_SCHEDULE)
        if schedule:
            user_id = update.effective_user.id
            db = context.bot_data['db']
            db.save_group(user_id, schedule.name)
            await query.edit_message_text(f"–ì—Ä—É–ø–ø–∞ {schedule.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        else:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
    else:
        await query.edit_message_text("–ì—Ä—É–ø–ø–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

    return await show_schedule_options(update, context)

async def show_schedule_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü–æ–∫–∞–∑ –æ–ø—Ü–∏–π –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="T")],
        [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="M")],
        [InlineKeyboardButton("–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é", callback_data="W")],
        [InlineKeyboardButton("–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", callback_data="NW")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    schedule = context.user_data[SELECTED_SCHEDULE]
    if isinstance(update.effective_message, telegram.Message):
        await update.effective_message.reply_text(
            f"üìö –ì—Ä—É–ø–ø–∞ {schedule.name}\n–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.message.reply_text(
            f"üìö –ì—Ä—É–ø–ø–∞ {schedule.name}\n–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
            reply_markup=reply_markup
        )
    
    return SHOW_SCHEDULE

async def cleansavegroup_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    user_id = update.effective_user.id
    db = context.bot_data['db']
    saved_group = db.get_group(user_id)
    if saved_group:
        db.clear_group(user_id)
        await update.message.reply_text(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ {saved_group} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.")

async def handle_show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    today = datetime.now()
    
    if query.data == 'T':
        # –°–µ–≥–æ–¥–Ω—è
        target_time = ScheduleRequest(today)
    elif query.data == 'M':
        # –ó–∞–≤—Ç—Ä–∞
        target_time = ScheduleRequest(today + timedelta(days=1))
    elif query.data == 'W':
        # –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
        week_start = today - timedelta(days=today.weekday())
        target_time = ScheduleRequest(week_start, is_week_request=True)
    else:  # NW
        # –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è
        next_week = today + timedelta(days=7-today.weekday())
        target_time = ScheduleRequest(next_week, is_week_request=True)

    selected_schedule: Schedule = context.user_data[SELECTED_SCHEDULE]

    try:
        timetable_data = await asu.get_timetable(selected_schedule, target_time)
        formatted_timetable = asu.format_schedule(
            timetable_data,
            selected_schedule.get_schedule_url(print_mode=False),
            selected_schedule.name,
            target_time  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ScheduleRequest –Ω–∞–ø—Ä—è–º—É—é
        )
        await query.edit_message_text(formatted_timetable, parse_mode=telegram.constants.ParseMode.MARKDOWN_V2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\."
        await query.edit_message_text(error_message)

    return END

async def find_schedule_of_group(group_name: str) -> Optional[Schedule]:
    # –ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    return await asu.find_schedule_url(group_name)
