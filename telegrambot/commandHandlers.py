import asyncio
from datetime import datetime, timedelta
import telegram
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, ConversationHandler

import asu.schedule as asu
from asu.group import Schedule

async def start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ê–ª—Ç–ì–£.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –∏–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏, –Ω–∞–ø–∏—à–∏ –Ω–∞–º.\n"
            "–ö–æ–Ω—Ç–∞–∫—Ç—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞")

async def schedule_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    group_name: str = ""
    if context.args is not None and len(context.args) > 0:
        group_name = ''.join(context.args)

    if not group_name:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /schedule 305—Å11-4')
        return

    message = update.message
    message = await message.reply_text(text=f'–ò—â—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã: {group_name}...')

    group = asu.find_schedule_url(group_name)

    if group:
        # –ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        buttons = [
            [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"today:{group.faculty_id}:{group.group_id}")],
            [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data=f"tomorrow:{group.faculty_id}:{group.group_id}")],
            [InlineKeyboardButton("–ù–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é", callback_data=f"full_week:{group.faculty_id}:{group.group_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.edit_text(f"üìö –ì—Ä—É–ø–ø–∞ {group.name}\n–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=reply_markup)
    else:
        await message.edit_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã.")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query

    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
    await query.answer()

    data = query.data.split(":")

    if len(data) != 3:
        # ban the user?
        return

    option = data[0].strip()
    faculty_id= data[1].strip()
    group_id = data[2].strip()

    group = Schedule("", int(faculty_id), int(group_id))

    await asyncio.sleep(1)

    response_text = asu.get_timetable(group.get_schedule_url())
    if isinstance(response_text, int):
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        logging.error(f'–û—à–∏–±–∫–∞ {response_text} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
        return
    
    options = {
        "today": datetime.now(),
        "tomorrow": datetime.now() + timedelta(days=1)
    }
    target_time = options.get(option)

    formatted_timetable = asu.format_schedule(response_text, group.get_schedule_url(), "", target_time)

    await query.edit_message_text(formatted_timetable, parse_mode=telegram.constants.ParseMode.MARKDOWN_V2)
