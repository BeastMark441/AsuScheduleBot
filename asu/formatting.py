from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union
from telegram.helpers import escape_markdown
import logging
from .schedule import ScheduleRequest  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç ScheduleRequest

class ScheduleFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    
    def __init__(self, is_lecturer: bool = False):
        self.is_lecturer = is_lecturer
        self.emoji_numbers = ("0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£")
        self.weekdays = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    def format_schedule(self, timetable_data: Dict, schedule_link: str, name: str, 
                       target_date: Optional[Union[datetime, 'ScheduleRequest']] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥"""
        logging.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {'–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è' if self.is_lecturer else '–≥—Ä—É–ø–ø—ã'} {name}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header_emoji = "üë©‚Äçüè´" if self.is_lecturer else "üìö"
        header_text = "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" if self.is_lecturer else "–≥—Ä—É–ø–ø—ã"
        formatted_schedule = [f"{header_emoji} –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {header_text}: {escape_markdown(name, version=2)}\n"]
        
        days = timetable_data.get("days", [])
        if not days:
            formatted_schedule.append("–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\.")
            return self._add_schedule_link(formatted_schedule, schedule_link)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        date_range = self._get_date_range(target_date)
        if not date_range:
            return self._add_schedule_link(formatted_schedule, schedule_link)
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–Ω–∏
        found_lessons = self._format_days(days, date_range, formatted_schedule)
        
        if not found_lessons:
            formatted_schedule.append("–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\.")
            
        return self._add_schedule_link(formatted_schedule, schedule_link)

    def _get_date_range(self, target_date: Optional[Union[datetime, 'ScheduleRequest']]) -> Optional[tuple]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        if not target_date:
            return None
            
        if hasattr(target_date, 'is_week_request') and target_date.is_week_request:
            start_date = target_date.date - timedelta(days=target_date.date.weekday())
            end_date = start_date + timedelta(days=6)
            logging.info(f"–§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É –Ω–µ–¥–µ–ª–∏: {start_date} - {end_date}")
        else:
            start_date = end_date = target_date.date if hasattr(target_date, 'date') else target_date
            logging.info(f"–§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–µ: {start_date}")
            
        return start_date, end_date

    def _format_days(self, days: List[Dict], date_range: tuple, formatted_schedule: List[str]) -> bool:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–Ω–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        found_lessons = False
        start_date, end_date = date_range
        
        for day in sorted(days, key=lambda x: x["date"]):
            date = datetime.strptime(day["date"], "%Y-%m-%d")
            
            if not self._is_date_in_range(date, start_date, end_date):
                continue
                
            found_lessons = True
            self._format_single_day(day, date, formatted_schedule)
            
        return found_lessons

    def _is_date_in_range(self, date: datetime, start_date: datetime, end_date: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Ö–æ–¥–∏—Ç –ª–∏ –¥–∞—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω"""
        if isinstance(start_date, datetime):
            return start_date.date() <= date.date() <= end_date.date()
        return start_date <= date.date() <= end_date

    def _format_single_day(self, day: Dict, date: datetime, formatted_schedule: List[str]) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        formatted_date = date.strftime('%d\\.%m')
        formatted_schedule.append(f"üìÖ {self.weekdays[date.weekday()]} {formatted_date}\n")
        
        lessons = day.get("lessons", [])
        if not lessons:
            formatted_schedule.append("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π\n")
            return
            
        for lesson in sorted(lessons, key=lambda x: int(x.get("number", "0"))):
            formatted_schedule.append(self._format_lesson(lesson))
        formatted_schedule.append("")

    def _format_lesson(self, lesson: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏"""
        number = lesson.get("number", "")
        time_start = lesson.get("timeStart", "").replace(":", "\\:")
        time_end = lesson.get("timeEnd", "").replace(":", "\\:")
        subject = escape_markdown(lesson.get("subject", {}).get("title", ""), version=2)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–Ω—è—Ç–∏—è
        lines = [
            f"{self._num_to_emoji(number)}üïë {time_start} \\- {time_end}",
            f"üìö {subject}",
        ]
        
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã
        if self.is_lecturer:
            groups = escape_markdown(lesson.get("groups", {}).get("title", ""), version=2)
            if groups:
                lines.append(f"üë• –ì—Ä—É–ø–ø—ã: {groups}")
        else:
            # –î–ª—è –≥—Ä—É–ø–ø –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            teacher = escape_markdown(lesson.get("teacher", {}).get("title", ""), version=2)
            if teacher:
                lines.append(f"üë© {teacher}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é
        room = lesson.get("classroom", {}).get("title", "").strip()
        room = room.replace('None', '').replace('`', '').strip()
        if room:
            classroom = escape_markdown(room, version=2)
            lines.append(f"üè¢ {classroom}")
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if "commentary" in lesson:
            lines.append(f"üí¨ {escape_markdown(lesson['commentary'], version=2)}")
            
        return "\n".join(lines) + "\n"

    def _num_to_emoji(self, num: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –≤ —ç–º–æ–¥–∑–∏"""
        if num.isdigit() and int(num) < len(self.emoji_numbers):
            return self.emoji_numbers[int(num)]
        return "‚ùì"

    def _add_schedule_link(self, formatted_schedule: List[str], schedule_link: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏"""
        escaped_link = schedule_link.replace(".", "\\.")
        formatted_schedule.append(f"üöÄ [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ]({escaped_link})")
        return "\n".join(formatted_schedule)

# –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
group_formatter = ScheduleFormatter(is_lecturer=False)
lecturer_formatter = ScheduleFormatter(is_lecturer=True)

def format_schedule(timetable_data: Dict, schedule_link: str, name: str, 
                   target_date: Optional[Union[datetime, 'ScheduleRequest']] = None,
                   is_lecturer: bool = False) -> str:
    """–§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    formatter = lecturer_formatter if is_lecturer else group_formatter
    return formatter.format_schedule(timetable_data, schedule_link, name, target_date)
