from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram.helpers import escape_markdown

def format_schedule(timetable_data: Dict, schedule_link: str, group_name: str, target_date: Optional[datetime] = None) -> str:
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    formatted_schedule = [f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã: {escape_markdown(group_name, version=2)}\n"]
    
    days = timetable_data.get("days", [])
    if not days:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        formatted_schedule.append("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\\.")
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ –¥–ª—è target_date
        start_of_week = target_date - timedelta(days=target_date.weekday())
        end_of_week = start_of_week + timedelta(days=6)
        
        for day in days:
            date = datetime.strptime(day["date"], "%Y-%m-%d")
            if start_of_week <= date <= end_of_week:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                formatted_date = date.strftime('%d\\.%m')  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É
                formatted_schedule.append(f"üìÖ {get_weekday(date.weekday())} {formatted_date}\n")
                
                lessons = day.get("lessons", [])
                if not lessons:
                    formatted_schedule.append("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π\n")
                else:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    for lesson in lessons:
                        formatted_lesson = format_lesson(lesson)
                        formatted_schedule.append(formatted_lesson)
                formatted_schedule.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¥–Ω—è–º–∏
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    escaped_link = schedule_link.replace(".", "\\.")
    formatted_schedule.append(f"üöÄ [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ]({escaped_link})")
    
    return "\n".join(formatted_schedule)

def format_lesson(lesson: Dict) -> str:
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–Ω—è—Ç–∏–∏
    number = lesson.get("number", "")
    time_start = lesson.get("timeStart", "").replace(":", "\\:")
    time_end = lesson.get("timeEnd", "").replace(":", "\\:")
    subject = escape_markdown(lesson.get("subject", {}).get("title", "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"), version=2)
    teacher = escape_markdown(lesson.get("teacher", {}).get("title", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"), version=2)
    classroom = escape_markdown(lesson.get("classroom", {}).get("title", "–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"), version=2)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–Ω—è—Ç–∏–∏
    formatted_lesson = (
        f"{num_to_emoji(number)}üïë {time_start} \\- {time_end}\n"
        f"üìö {subject}\n"
        f"üë© {teacher}\n"
        f"üè¢ {classroom}\n"
    )
    return formatted_lesson

def get_weekday(weekday: int) -> str:
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
    weekdays = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return weekdays[weekday]

def num_to_emoji(num: str) -> str:
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –≤ —ç–º–æ–¥–∑–∏
    emoji_numbers = ("0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£")
    if num.isdigit() and int(num) < len(emoji_numbers):
        return emoji_numbers[int(num)]
    return "‚ùì"
