from datetime import date, datetime, timedelta
from operator import le
from typing import Dict, List, Optional, Union
from frozenlist import FrozenList
from telegram.helpers import escape_markdown
import logging

from asu.timetable import Lesson, TimeTable

from utils.sub_format import get_sub
from utils.daterange import DateRange

EMOJI_NUMBERS: FrozenList[str] = FrozenList(["0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"])
USER_FRIENDLY_WEEKDAYS: FrozenList[str] = FrozenList(["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"])

class ScheduleFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    
    def __init__(self, is_lecturer: bool = False):
        self.is_lecturer = is_lecturer

    def format_schedule(self, timetable: TimeTable, schedule_link: str, name: str,
                       date_range: DateRange) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥"""
        logging.info("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è %s %s", '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è' if self.is_lecturer else '–≥—Ä—É–ø–ø—ã', name)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header_emoji: str = "üë©‚Äçüè´" if self.is_lecturer else "üìö"
        header_text: str = "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" if self.is_lecturer else "–≥—Ä—É–ø–ø—ã"
        formatted_schedule: list[str] = [f"{header_emoji} –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {header_text}: {escape_markdown(name, version=2)}\n"]
        
        if not timetable.days:
            formatted_schedule.append("–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\.")
            return self._add_schedule_link(formatted_schedule, schedule_link)
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–Ω–∏
        found_lessons = self._format_days(timetable, date_range, formatted_schedule)
        
        if not found_lessons:
            formatted_schedule.append("–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\.")
            
        return self._add_schedule_link(formatted_schedule, schedule_link)

    def _format_days(self, timetable: TimeTable, date_range: DateRange, formatted_schedule: list[str]) -> bool:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–Ω–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        found_lessons = False

        for date, lessons in sorted(timetable.days.items(), key=lambda item: item[0]):
            if not date_range.is_date_in_range(date):
                continue
                
            found_lessons = True
            self._format_single_day(lessons, date, formatted_schedule)
            
        return found_lessons

    def _is_date_in_range(self, date: datetime, start_date: datetime, end_date: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Ö–æ–¥–∏—Ç –ª–∏ –¥–∞—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω"""
        if isinstance(start_date, datetime):
            return start_date.date() <= date.date() <= end_date.date()
        return start_date <= date.date() <= end_date

    def _format_single_day(self, lessons: list[Lesson], date: date, formatted_schedule: list[str]) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        formatted_date = date.strftime('%d.%m')
        formatted_schedule.append(f"üìÖ {USER_FRIENDLY_WEEKDAYS[date.weekday()]} {escape_markdown(formatted_date, version=2)}\n")
        
        if not lessons:
            formatted_schedule.append("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π\n")
            return
            
        for lesson in lessons:
            formatted_schedule.append(self._format_lesson(lesson))
        formatted_schedule.append("")

    def _format_lesson(self, lesson: Lesson) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏"""

        lesson_subgroups: set[str] = set()
        for group in lesson.subject.groups:
            if group.sub_group:
                lesson_subgroups.update(get_sub(group.sub_group))

        lesson_subgroups_str = ''.join(lesson_subgroups)
        subject_title = escape_markdown(f"{lesson.subject.type} {lesson.subject.title}", version=2)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–Ω—è—Ç–∏—è
        lines = [
            f"{self._num_to_emoji(lesson.number)}üïë {escape_markdown(lesson.time_start, version=2)} \\- {escape_markdown(lesson.time_end, version=2)}",
            f"üìö {lesson_subgroups_str}{subject_title}",
        ]
        
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã
        if self.is_lecturer:
            groups: set[str] = set()

            for group in lesson.subject.groups:
                groups.update(group.name)

            if not groups:
                groups.update("‚ùì")

            lines.append(f"üë• –ì—Ä—É–ø–ø—ã: {escape_markdown(' '.join(groups), version=2)}")
        else:
            lecturers: set[str] = set()

            for lecturer in lesson.subject.lecturers:
                lecturers.update(lecturer.name)

            if not lecturer:
                lecturer = "‚ùì"
            
            lines.append(f"üë© {escape_markdown(' '.join(lecturers), version=2)}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é
        room = escape_markdown(f"{lesson.subject.room.number} {lesson.subject.room.address_code}", version=2)
        lines.append(f"üè¢ {room}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if lesson.subject.comment:
            lines.append(f"üí¨ {escape_markdown(lesson.subject.comment, version=2)}")
            
        return "\n".join(lines) + "\n"

    @staticmethod
    def _num_to_emoji(num: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –≤ —ç–º–æ–¥–∑–∏"""
        if num.isdigit() and int(num) < len(EMOJI_NUMBERS):
            return EMOJI_NUMBERS[int(num)]
        return "‚ùì"

    @staticmethod
    def _add_schedule_link(formatted_schedule: list[str], schedule_link: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏"""
        formatted_schedule.append(f"üöÄ [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ]({escape_markdown(schedule_link)})")
        return "\n".join(formatted_schedule)

# –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
group_formatter = ScheduleFormatter(is_lecturer=False)
lecturer_formatter = ScheduleFormatter(is_lecturer=True)

def format_schedule(timetable_data: TimeTable, schedule_link: str, name: str, 
                   target_date: DateRange, is_lecturer: bool) -> str:
    """–§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    formatter = lecturer_formatter if is_lecturer else group_formatter
    return formatter.format_schedule(timetable_data, schedule_link, name, target_date)
