from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union
from telegram.helpers import escape_markdown
import logging

def format_schedule(timetable_data: Dict, schedule_link: str, group_name: str, target_date: Optional[Union[datetime, 'ScheduleRequest']] = None) -> str:
    logging.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}. –î–∞–Ω–Ω—ã–µ: {timetable_data}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    formatted_schedule = [f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã: {escape_markdown(group_name, version=2)}\n"]
    
    days = timetable_data.get("days", [])
    if not days:
        logging.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}")
        formatted_schedule.append("–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\.")
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if target_date:
            if hasattr(target_date, 'is_week_request') and target_date.is_week_request:
                # –î–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é –Ω–µ–¥–µ–ª—é
                start_of_week = target_date.date - timedelta(days=target_date.date.weekday())
                end_of_week = start_of_week + timedelta(days=6)
                logging.info(f"–§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É –Ω–µ–¥–µ–ª–∏: {start_of_week} - {end_of_week}")
            else:
                # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –¥–µ–Ω—å
                if hasattr(target_date, 'date'):
                    start_of_week = end_of_week = target_date.date
                else:
                    start_of_week = end_of_week = target_date
                logging.info(f"–§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–µ: {start_of_week}")
        else:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–Ω–∏
            start_of_week = end_of_week = None
            logging.info("–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–Ω–∏")
        
        found_lessons = False
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ
        sorted_days = sorted(days, key=lambda x: x["date"])
        
        for day in sorted_days:
            date = datetime.strptime(day["date"], "%Y-%m-%d")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            if start_of_week and end_of_week:
                if isinstance(start_of_week, datetime):
                    start_date = start_of_week.date()
                    end_date = end_of_week.date()
                else:
                    start_date = start_of_week
                    end_date = end_of_week
                
                if not (start_date <= date.date() <= end_date):
                    logging.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–Ω—å {date.date()}, –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
                    continue
            
            found_lessons = True
            formatted_date = date.strftime('%d\\.%m')
            formatted_schedule.append(f"üìÖ {get_weekday(date.weekday())} {formatted_date}\n")
            
            lessons = day.get("lessons", [])
            if not lessons:
                formatted_schedule.append("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π\n")
            else:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã
                sorted_lessons = sorted(lessons, key=lambda x: int(x.get("number", "0")))
                for lesson in sorted_lessons:
                    formatted_lesson = format_lesson(lesson)
                    formatted_schedule.append(formatted_lesson)
                formatted_schedule.append("")
        
        if not found_lessons:
            logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}")
            formatted_schedule.append("–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\.")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    escaped_link = schedule_link.replace(".", "\\.")
    formatted_schedule.append(f"üöÄ [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ]({escaped_link})")
    
    result = "\n".join(formatted_schedule)
    logging.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {result}")
    return result

def format_lesson(lesson: Dict) -> str:
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–Ω—è—Ç–∏–∏
    number = lesson.get("number", "")
    time_start = lesson.get("timeStart", "").replace(":", "\\:")
    time_end = lesson.get("timeEnd", "").replace(":", "\\:")
    subject = escape_markdown(lesson.get("subject", {}).get("title", "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"), version=2)
    teacher = escape_markdown(lesson.get("teacher", {}).get("title", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"), version=2)
    classroom = escape_markdown(lesson.get("classroom", {}).get("title", "–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"), version=2)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–Ω—è—Ç–∏–∏
    formatted_lesson = (
        f"{num_to_emoji(number)}üïë {time_start} \\- {time_end}\n"
        f"üìö {subject}\n"
        f"üë© {teacher}\n"
        f"üè¢ {classroom}\n"
    )
    return formatted_lesson

def get_weekday(weekday: int) -> str:
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
    weekdays = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return weekdays[weekday]

def num_to_emoji(num: str) -> str:
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –≤ —ç–º–æ–¥–∑–∏
    emoji_numbers = ("0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£")
    if num.isdigit() and int(num) < len(emoji_numbers):
        return emoji_numbers[int(num)]
    return "‚ùì"
