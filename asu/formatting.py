from datetime import datetime
from typing import Dict, List, Optional

from frozenlist import FrozenList
from md2tgmd import escape as escape_markdown
from bs4 import BeautifulSoup, Tag

def __extract_text(cell: Optional[Tag], default: str) -> str:
    return cell.get_text(strip=True, separator=' ').strip() if cell else default

_weekdays = FrozenList(["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"])
def __get_weekday(weekday: int) -> str:
    if weekday >= len(_weekdays):
        return ""
    
    return _weekdays[weekday]

_emoji_numbers = FrozenList(("0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"))
def __num_to_emoji(num: str) -> str:
    if num.isdigit() and (int(num) - 1) < len(_emoji_numbers):
        return _emoji_numbers[int(num) - 1]
    
    return "‚ùì"

def format_schedule(response_text: str, schedule_link: str, group_name: str, target_date: Optional[datetime] = None) -> str:
    soup = BeautifulSoup(response_text, 'html.parser')
    timetable = soup.find('table', class_='schedule_table')

    if not timetable or not isinstance(timetable, Tag):
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π"

    formatted_schedule = [f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã: {group_name}\n"]
    current_date = datetime.now()
    days_schedule: Dict[datetime, List[str]] = {}

    row: Tag
    for row in timetable.find_all_next('tr', class_='schedule_table-body-row'): # type: ignore
        date_cell = row.find('td', {'data-type': 'date'})
        if date_cell:
            current_date = datetime.strptime(
                date_cell.get_text(strip=True).split()[1], "%d.%m.%Y")

            continue

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä–µ
        pair_number = __extract_text(row.find('td', {'data-type': 'num'}), "–ù–æ–º–µ—Ä –ø–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω") # type: ignore
        time = __extract_text(row.find('td', {'data-type': 'time'}), "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ") # type: ignore
        subject = __extract_text(row.find('td', {'data-type': 'subject'}), "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω") # type: ignore
        lecturer = __extract_text(row.find('td', {'data-type': 'lecturer'}), "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω") # type: ignore
        room = __extract_text(row.find('td', {'data-type': 'room'}), "–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞") # type: ignore
        subtext = __extract_text(row.find('span', class_='schedule_table-subtext'), "") # type: ignore

        if subtext:
            subject = subject.replace(subtext, '')

        formatted_row = (
            f"{__num_to_emoji(pair_number)}üïë {time}\n"
            f"üìö {subject}\n"
            f"üë© {lecturer}\n"
            f"üè¢ {room}\n"
        )

        if subtext:
            formatted_row += f"üè∑Ô∏è {subtext}\n"

        days_schedule.setdefault(current_date, []).append(formatted_row)

    for date, entries in days_schedule.items():
        if not target_date or date.date() == target_date.date():
            formatted_schedule.append(f"üìÖ {__get_weekday(date.weekday())} {date.strftime('%d.%m')}\n" + "\n".join(entries))

    formatted_schedule.append(f"üöÄ [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ]({schedule_link})")
    
    return escape_markdown("\n\n".join(formatted_schedule))

