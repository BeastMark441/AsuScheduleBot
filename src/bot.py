from typing import List, Tuple
import requests
import re
from bs4 import BeautifulSoup
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def find_schedule(group_name: str):
    search_url = f"https://www.asu.ru/timetable/search/students/?query={group_name}"
    response = requests.get(search_url)

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        schedule_link = soup.find('a', title='—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã')

        if schedule_link:
            return "https://www.asu.ru" + schedule_link['href'] + "?mode=print"
        else:
            return "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    else:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."

def get_cs_id(session: requests.Session, url: str) -> str:
    response = session.get(url)
    pattern = r"'X-CS-ID', '([0-9a-z]{32})'"
    match = re.search(pattern, response.text)

    if not match:
        raise Exception("CS-ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ.")

    return match.group(1)

def get_timetable(schedule_url: str) -> str:
    session = requests.Session()
    cs_id = get_cs_id(session, schedule_url)

    custom_headers = {
        "X-CS-ID": cs_id,
        "referer": schedule_url
    }

    response = session.get(schedule_url, headers=custom_headers)

    if response.status_code != 200:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."

    return response.text

def translate_pair_number(pair_number: str) -> str:
    emoji_numbers = ["0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"]

    if pair_number.isdigit() and int(pair_number) < 10:
        return emoji_numbers[int(pair_number)]
    else:
        return "‚ùì"  # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã 0-9

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_schedule(response_text: str, schedule_link: str, group_name: str) -> str:
    soup = BeautifulSoup(response_text, 'html.parser')
    timetable = soup.find('table', class_='schedule_table')

    if not timetable:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    formatted_schedule = []
    formatted_schedule.append(f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã: {group_name}\nüöÄ –ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n")

    current_date = ""
    days_schedule = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–Ω—è–º

    rows = timetable.find_all('tr', class_='schedule_table-body-row')
    for row in rows:
        date_cell = row.find('td', {'data-type': 'date'})
        if date_cell:
            current_date = date_cell.get_text(strip=True).strip()
            continue

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä–µ
        pair_number_cell = row.find('td', {'data-type': 'num'})
        time_cell = row.find('td', {'data-type': 'time'})
        subject_cell = row.find('td', {'data-type': 'subject'})
        lecturer_cell = row.find('td', {'data-type': 'lecturer'})
        room_cell = row.find('td', {'data-type': 'room'})
        modify_date_cell = row.find('td', {'data-type': 'modify_date'})
        subtext_cell = row.find('span', class_='schedule_table-subtext')

        date_stripped = current_date.replace('\n', '').strip()  # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –¥–∞—Ç–µ
        pair_number = pair_number_cell.get_text(strip=True) if pair_number_cell else "–ù–æ–º–µ—Ä –ø–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω"
        time = time_cell.get_text(strip=True) if time_cell else "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        subject = subject_cell.get_text(strip=True) if subject_cell else "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"
        lecturer = lecturer_cell.get_text(strip=True) if lecturer_cell else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"
        room = room_cell.get_text(strip=True).strip() if room_cell else "–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"; room = room if room else "–∞—É–¥ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"; 
        modify_date = modify_date_cell.get_text(strip=True) if modify_date_cell else "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        # –°–Ω–æ—Å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        subtext = subtext_cell.get_text(strip=True) if subtext_cell else ""

        if subtext:
            subject = subject.replace(subtext, '')

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        formatted_row = (
            f"{translate_pair_number(pair_number)} "
            f"üïë {time}\n"
            f"üìö {subject}\n"
            f"üë© {lecturer}\n"
            f"üè¢ {room}\n"
            #f"‚úèÔ∏è –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {modify_date}\n"
        )

        if subtext:
            formatted_row += f"üè∑Ô∏è {subtext}\n"  # –í—ã–¥–µ–ª—è–µ–º —Å–Ω–æ—Å–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

        if date_stripped not in days_schedule:
            days_schedule[date_stripped] = []
        days_schedule[date_stripped].append(formatted_row)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º
    for date, entries in days_schedule.items():
        formatted_schedule.append(f"üìÖ {date}\n" + "\n".join(entries))

    formatted_schedule.append(f"üöÄ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n({schedule_link})")
    return "\n\n".join(formatted_schedule)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /schedule
async def schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /schedule 305—Å11-4')
        return

    group_name = context.args[0]
    await update.message.reply_text(f'–ò—â—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã: {group_name}...')

    schedule_url = find_schedule(group_name)

    if "http" in schedule_url:
        response_text = await asyncio.to_thread(get_timetable, schedule_url)  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        if isinstance(response_text, str) and "–û—à–∏–±–∫–∞" in response_text:
            await update.message.reply_text(response_text)
        else:
            formatted_timetable = format_schedule(response_text, schedule_url, group_name)
            await update.message.reply_text(formatted_timetable)
    else:
        await update.message.reply_text(schedule_url)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    TOKEN = 'TODO'  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

    application = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule
    application.add_handler(CommandHandler('schedule', schedule))

    application.run_polling()

if __name__ == '__main__':
    main()